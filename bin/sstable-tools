#!/bin/sh
source ~/.bash_profile
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if [ "x$CASSANDRA_INCLUDE" = "x" ]; then
    # Locations (in order) to use when searching for an include file.
    for include in "`dirname "$0"`/cassandra.in.sh" \
                   "$HOME/.cassandra.in.sh" \
                   /usr/share/cassandra/cassandra.in.sh \
                   /usr/local/share/cassandra/cassandra.in.sh \
                   /opt/cassandra/cassandra.in.sh; do
        if [ -r "$include" ]; then
            . "$include"
            break
        fi
    done
elif [ -r "$CASSANDRA_INCLUDE" ]; then
    . "$CASSANDRA_INCLUDE"
fi

# Use JAVA_HOME if set, otherwise look for java in PATH
if [ -x "$JAVA_HOME/bin/java" ]; then
    JAVA="$JAVA_HOME/bin/java"
else
    JAVA="`which java`"
fi

if [ "x$JAVA" = "x" ]; then
    echo "Java executable not found (hint: set JAVA_HOME)" >&2
    exit 1
fi

if [ -z "$CLASSPATH" ]; then
    echo "You must set the CLASSPATH var" >&2
    exit 1
fi

if [ "x$MAX_HEAP_SIZE" = "x" ]; then
    MAX_HEAP_SIZE="256M"
fi
migrate_dirs=""
table=""
keyspace=""
cron_expression=""
max_attempt=""
expired_second=""

function migrate_conf(){
    migrate_prop=$CASSANDRA_HOME/conf/migrate.properties
    migrate_dirs=$(sed -n "s/^[^#\s]*migrate_dirs\s*:\s*//p" $migrate_prop)
    table=$(sed -n "s/^[^#\s]*table\s*:\s*//p" $migrate_prop)
    keyspace=$(sed -n "s/^[^#\s]*keyspace\s*:\s*//p" $migrate_prop)
    cron_expression=$(sed -n "s/^[^#\s]*cron_expression\s*:\s*//p" $migrate_prop)
    max_attempt=$(sed -n "s/^[^#\s]*max_attempt\s*:\s*//p" $migrate_prop)
    expired_second=$(sed -n "s/^[^#\s]*expired_second\s*:\s*//p" $migrate_prop)
    migrate_dirs=$(echo $migrate_dirs)
    migrate_opts=" -k $keyspace -t $table -m $max_attempt -e $expired_second -c \"'$cron_expression'\" -- $migrate_dirs"
    echo "$migrate_opts"
}
if [ "x$1" == xmigrate ]; then
quartz_properties=$CASSANDRA_HOME/conf/quartz.properties
migrate_conf
migrate_prop=$CASSANDRA_HOME/conf/migrate.properties
    migrate_dirs=$(sed -n "s/^[^#\s]*migrate_dirs_.*\s*=\s*//p" $migrate_prop)
    table=$(sed -n "s/^[^#\s]*table\s*=\s*//p" $migrate_prop)
    keyspace=$(sed -n "s/^[^#\s]*keyspace\s*=\s*//p" $migrate_prop)
    cron_expression=$(sed -n "s/^[^#\s]*cron_expression\s*=\s*//p" $migrate_prop)
    max_attempt=$(sed -n "s/^[^#\s]*max_attempt\s*=\s*//p" $migrate_prop)
    expired_second=$(sed -n "s/^[^#\s]*expired_second\s*=\s*//p" $migrate_prop)
    migrate_dirs=$(echo $migrate_dirs)
exec "$JAVA" $JAVA_AGENT -ea -cp "$CLASSPATH" $JVM_OPTS -Xmx$MAX_HEAP_SIZE \
        -Dcassandra.storagedir="$cassandra_storagedir" \
        -Dcassandra.logdir="$CASSANDRA_HOME/logs" \
        -Dorg.quartz.properties="$quartz_properties" \
        -Dlogback.configurationFile=$CASSANDRA_HOME/conf/logback-sstable.xml \
        cn.ac.iie.drive.Driver $1 -k $keyspace -t $table -m $max_attempt \
            -e $expired_second -c "$cron_expression" $migrate_dirs <&- &
else
exec "$JAVA" $JAVA_AGENT -ea -cp "$CLASSPATH" $JVM_OPTS -Xmx$MAX_HEAP_SIZE \
        -Dcassandra.storagedir="$cassandra_storagedir" \
        -Dcassandra.logdir="$CASSANDRA_HOME/logs" \
        -Dlogback.configurationFile=$CASSANDRA_HOME/conf/logback-sstable.xml \
        cn.ac.iie.drive.Driver "$@" <&- 
fi
# vi:ai sw=4 ts=4 tw=0 et
